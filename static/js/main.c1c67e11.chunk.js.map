{"version":3,"sources":["LoginScreen/LoginScreen.js","VolumentalMenu/VolumentalMenu.js","chart-consts.js","ChartScreen/ChartScreen.js","ErrorBox/ErrorBox.js","MainView/MainView.js","assets/animations.js","app/App.js","serviceWorker.js","index.js"],"names":["LoginScreen","loginClick","username","document","getElementById","value","password","props","login","this","loggedIn","className","id","placeholder","type","onClick","Component","VolumentalMenu","href","listOfWidthsAndColors","size","color","chartVisualOptions","maintainAspectRatio","scales","xAxes","stacked","gridLines","yAxes","ChartScreen","displayCorrectData","genderAndSystem","allTheData","data","i","length","element","gender","system","setState","dataToShow","generateChartData","updateChart","generateOptionElements","allMyData","theSelect","optionText","newOption","createElement","text","appendChild","state","chartData","theData","sizes","listOfNum","listOfDatasets","Object","keys","forEach","num","parseFloat","push","sort","a","b","oneDataSet","label","backgroundColor","borderWidth","hoverBackgroundColor","currentDataSet","currentLabel","widthObj","toString","currentWidth","labels","datasets","onChange","options","ErrorBox","stringError","theError","resetAfterError","MainView","window","location","reload","token","query","undefined","requestUri","myHeader","Headers","append","auth","btoa","req","Request","method","headers","fetch","then","response","ok","json","myError","status","jsonData","allData","style","transitionDelay","transitionDuration","opacity","marginTop","setTimeout","bind","catch","err","marginLeft","zIndex","console","log","fakeLogin","loginAnimation","App","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.c1c67e11.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './loginscreen.css'\n\nclass LoginScreen extends Component{\n\n    loginClick = () => {\n        let username = document.getElementById('login-input-username').value\n        let password = document.getElementById('login-input-password').value\n        this.props.login(username, password)\n    }\n\n    render() {\n        if(this.props.loggedIn === false) {\n            return(\n            <div>\n                <div className=\"login-screen-background-image\" id=\"login-screen-background-image\">\n                    <div className=\"login-box\" id=\"login-box\">\n                        <div className=\"login-box-title\">Login</div>\n                        <input id=\"login-input-username\" className=\"login-input-boxes\" placeholder=\"Username\"/>\n                        <input id=\"login-input-password\" type=\"password\" className=\"login-input-boxes\" placeholder=\"Password\"/>\n                        <div className=\"login-button\" onClick={() => this.loginClick()}>Login</div>\n                    </div>\n                </div>\n            </div>\n            )\n        } else return null\n    }\n}\nexport default LoginScreen","import React, { Component } from 'react'\nimport './volumentalmenu.css'\n\nclass VolumentalMenu extends Component {\n    render() {\n        return (\n            <div>\n                <nav className=\"nav-menu\">\n                    <div className=\"nav-logo\"></div>\n                    <div className=\"nav-link-wrapper\">\n                        <a href=\"https://www.volumental.com/volumental-products\" className=\"nav-link w-nav-link\">PRODUCTS</a>\n                        <a href=\"https://www.volumental.com/customer-stories\" className=\"nav-link w-nav-link\">CUSTOMER STORIES</a>\n                        <a href=\"https://www.volumental.com/volumental-team\" className=\"nav-link w-nav-link\">WHO WE ARE</a>\n                        <a href=\"https://jobs.volumental.com/\" className=\"nav-link w-nav-link\">JOBS</a>\n                        <a href=\"https://www.volumental.com/press\" className=\"nav-link w-nav-link\">PRESS</a>\n                        <a href=\"http://www.prescottblackler.com\" className=\"nav-link w-nav-link\">REACH OUT</a>\n                    </div>\n                </nav>\n            </div>\n        )\n    }\n}\nexport default VolumentalMenu","export const listOfWidthsAndColors = [{size:'2A', color: '182, 97, 138'}, {size:'2E', color: '162, 178, 185'}, {size:'3A', color: '179, 235, 128'}, {size:'3E', color: '152, 129, 182'}, {size:'A', color: '0, 31, 74'}, {size:'B', color: '91, 182, 186'}, {size:'C', color: '0, 98, 155'}, {size:'D', color: '255, 225, 178'}, {size:'E', color: '80, 81, 132'}]\n\nexport const chartVisualOptions = {\n    maintainAspectRatio: true,\n    scales: {\n        xAxes: [{stacked: true, gridLines: {color: \"rgba(255, 255, 255, 0)\"}}],\n        yAxes: [{stacked: true, gridLines: {color: \"rgba(255, 255, 255, 0)\"}}]\n    }\n}\n","import React, { Component } from 'react'\nimport './chartscreen.css'\nimport {Bar} from 'react-chartjs-2'\nimport {chartVisualOptions, listOfWidthsAndColors} from '../chart-consts'\n\nclass ChartScreen extends Component {\n    constructor() {\n        super()\n        this.state = {\n            dataToShow: {},\n            chartData: {}\n        }\n    }\n    //INITIALIZE DATA\n    componentDidMount() {\n        let initialGender = this.props.data[0].gender\n        let initialSystem = this.props.data[0].system\n        let genderAndSystem = initialGender + ': ' + initialSystem\n        this.displayCorrectData(genderAndSystem)\n        this.generateOptionElements()\n    }\n\n    displayCorrectData = (genderAndSystem) => {\n        let allTheData = this.props.data\n        for(let i = 0; i < allTheData.length; i++) {\n            let element = allTheData[i]\n            if(element.gender +': ' + element.system === genderAndSystem) {\n               this.setState({dataToShow: element}, () => {\n                    this.generateChartData()\n                }) \n            }\n        }\n    }\n\n    updateChart = () => {\n        let genderAndSystem = document.getElementById('chart-dropdowns').value\n        this.displayCorrectData(genderAndSystem)\n    }\n\n    generateChartData() {\n        let theData = this.state.dataToShow.sizes\n        //ALL ARRAYS\n        let listOfNum = []\n        let listOfDatasets = []\n\n        //PUT SIZE KEYS INTO AN ARRAY\n        let xAxisSizes = Object.keys(theData)\n\n        //SORT LABELS\n        xAxisSizes.forEach(element => {\n            let num = parseFloat(element)\n            listOfNum.push(num)\n        });\n        listOfNum = listOfNum.sort(function(a, b) {\n            if (a > b) { return 1;} \n            else if (b > a) {return -1;} \n            else {return 0;}\n        })\n\n        //GENERATE DATASET TEMPLATES\n        for(let i = 0; i < listOfWidthsAndColors.length; i++) {\n            let element = listOfWidthsAndColors[i]\n            let oneDataSet = {\n                label: element.size,\n                stacked: element.size,\n                backgroundColor: `rgba(${element.color},0.6)`,\n                borderWidth: 1,\n                hoverBackgroundColor: `rgba(${element.color},1)`,\n                data: []\n            }\n            listOfDatasets.push(oneDataSet)\n        }\n\n        //POPULATE ALL DATASET'S DATA ARRAYS  -->  (THIS LOOKS NASTY)\n        for(let i = 0; i < listOfDatasets.length; i++) {\n             let currentDataSet = listOfDatasets[i].data\n             let currentLabel = listOfDatasets[i].label\n            for(let i = 0; i < listOfNum.length; i++) {\n                let theSize = listOfNum[i]\n                let theStringSize = theSize.toString()\n                let widthObj = theData[theStringSize]\n                for(let i = 0; i < listOfDatasets.length; i++) {\n                    let currentWidth = listOfDatasets[i].label\n                    if(currentLabel === currentWidth) {\n                        currentDataSet.push(widthObj[currentWidth])\n                    }\n                }\n            }\n        }\n\n        const data = { labels: listOfNum, datasets: listOfDatasets};\n\n        this.setState({\n            chartData: data,\n        })\n    }\n\n    generateOptionElements = () => {\n        let allMyData = this.props.data\n        let theSelect = document.getElementById('chart-dropdowns')\n        for(let i = 0; i < allMyData.length; i++){\n            let element = allMyData[i]\n            let optionText = element.gender + \": \" + element.system\n            let newOption = document.createElement('option')\n            newOption.value = optionText\n            newOption.text = optionText\n            theSelect.appendChild(newOption)\n        }\n    }\n\n    render() {\n        return(\n            <div>\n                <div className=\"chart-screen\">\n                    <div className=\"chart-header\">\n                        <h1 className=\"chart-title\">SIZE DISTRIBUTION</h1>\n                    </div>\n                    <select className=\"chart-dropdowns\" id=\"chart-dropdowns\" onChange={() => this.updateChart()}></select>\n                    <div className=\"chart-wrapper\">\n                        <p className=\"key-instructions\">Click on the colored boxes to remove that width from the chart</p>\n                        <Bar data={this.state.chartData} options={chartVisualOptions} />\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\nexport default ChartScreen","import React from 'react'\nimport './errorbox.css'\n\nexport function ErrorBox(props){\n    let stringError = props.theError\n    return(\n        <div>\n            <div className=\"error-box\" id=\"error-box\">\n                <div className=\"error-box-content\" id=\"error-box-content\">\n                    <div className=\"error-shoes\"></div>\n                    <h3 className=\"error-box-title\">Ooops...<br></br>Error: Status {stringError}</h3>\n                    <div className=\"error-box-button\" onClick={() => props.resetAfterError()}>Ok</div>\n                </div>\n            </div>\n        </div>\n    )\n}","import React, { Component } from 'react'\nimport LoginScreen from '../LoginScreen/LoginScreen'\nimport VolumentalMenu from '../VolumentalMenu/VolumentalMenu'\nimport ChartScreen from '../ChartScreen/ChartScreen'\nimport {ErrorBox} from '../ErrorBox/ErrorBox'\nimport {loginAnimation, errorAnimation} from '../assets/animations'\n\nlet uri = `https://homeexercise.volumental.com`\n\nclass MainView extends Component {\n    constructor() {\n        super()\n        this.state = {\n            loggedIn: false,\n            data: [],\n            theError: ''\n        }\n    }\n\n    resetAfterError = () => {\n        window.location.reload()\n    }\n\n    //LOGIN FUNCTION\n    login = (username, password, token) => {\n        let query = '/sizingsample'\n        if(token !== undefined) {query = `/sizingsample?page=${token}`}\n        let requestUri = uri + query;\n        let myHeader = new Headers();\n        myHeader.append('Accept', 'application/json')\n        let encodedVerification = window.btoa(username + ':' + password)\n        let auth = 'Basic ' + encodedVerification;\n        myHeader.append('Authorization', auth)\n        let req = new Request(requestUri, {\n            method: 'GET',\n            headers: myHeader,   \n        });\n        fetch(req)\n        .then( (response) => {\n            if (response.ok){\n                return response.json()\n            } else{\n                let myError = response.status\n                this.setState({theError: myError})\n            }\n        })\n        .then( (jsonData) => {\n            //PAGE CONTINUATION LOOP\n            token = jsonData[\"next-page\"]\n            let allData = this.state.data\n            allData.push(jsonData[\"data\"][0])\n            this.setState({data: allData})\n            if(token !== undefined) {\n                loginAnimation()\n                this.login(username, password, token)\n            } else {\n                setTimeout(function(){\n                    this.setState({loggedIn: true})\n                }.bind(this), 300)\n            }\n        })\n        .catch( (err) => {\n            errorAnimation()\n            console.log(err)\n        })\n    }\n\n    render() {\n        const {data, loggedIn, theError} = this.state\n\n        if(this.state.loggedIn === false) {\n            return (\n                <div>\n                    <VolumentalMenu />\n                    <LoginScreen fakeLogin={this.fakeLogin} loggedIn={loggedIn} loginAnimation={this.loginAnimation} login={this.login}/>\n                    <ErrorBox resetAfterError={this.resetAfterError} theError={theError}/>\n                </div>\n            )\n        } else {\n            return (\n                <div>\n                    <VolumentalMenu />\n                    <ChartScreen data={data} />\n                </div>\n            )\n        }\n    }\n}\nexport default MainView","export function loginAnimation(){\n    document.getElementById('login-screen-background-image').style.transitionDelay = \"200ms\"\n    document.getElementById('login-screen-background-image').style.transitionDuration = \"500ms\"\n    document.getElementById('login-screen-background-image').style.backgroundColor = \"rgb(167, 203, 227)\"\n    document.getElementById('login-screen-background-image').style.opacity = \"0\"\n    document.getElementById('login-box').style.transitionDuration = \"700ms\"\n    document.getElementById('login-box').style.marginTop = \"-400px\"\n}\n\nexport function errorAnimation(){\n    document.getElementById('error-box').style.marginLeft = \"0\"\n    document.getElementById('error-box').style.zIndex = \"3\"\n    document.getElementById('error-box-content').style.marginTop = \"150px\"\n}","import React from 'react';\nimport './App.css';\nimport MainView from '../MainView/MainView'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainView />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}